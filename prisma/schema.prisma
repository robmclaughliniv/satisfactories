generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  worlds    World[]
}

model World {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  factories   Factory[]
  resources   Resource[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Factory {
  id              String           @id @default(uuid())
  name            String
  description     String?
  location        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  worldId         String
  buildings       Building[]
  world           World            @relation(fields: [worldId], references: [id], onDelete: Cascade)
  asOrigin        InputResource[]  @relation("FactoryOrigin")
  outputs         ItemFlow[]       @relation("FactoryOutputs")
  inputs          ItemFlow[]       @relation("FactoryInputs")
  asDestination   OutputResource[] @relation("FactoryDestination")
  resourceInputs  ResourceInput[]
  resourceOutputs ResourceOutput[]
}

model ResourceInput {
  id          String          @id @default(uuid())
  name        String?
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  factoryId   String
  resources   InputResource[]
  factory     Factory         @relation(fields: [factoryId], references: [id], onDelete: Cascade)
}

model ResourceOutput {
  id          String           @id @default(uuid())
  name        String?
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  factoryId   String
  resources   OutputResource[]
  factory     Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)
}

model InputResource {
  id              String        @id @default(uuid())
  rate            Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  itemId          String
  resourceInputId String
  resourceNodeId  String?
  factoryOriginId String?
  factoryOrigin   Factory?      @relation("FactoryOrigin", fields: [factoryOriginId], references: [id])
  item            Item          @relation(fields: [itemId], references: [id])
  resourceInput   ResourceInput @relation(fields: [resourceInputId], references: [id], onDelete: Cascade)
  resourceNode    Resource?     @relation("ResourceNodeOrigin", fields: [resourceNodeId], references: [id])
}

model OutputResource {
  id                   String         @id @default(uuid())
  rate                 Float
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  itemId               String
  resourceOutputId     String
  factoryDestinationId String?
  factoryDestination   Factory?       @relation("FactoryDestination", fields: [factoryDestinationId], references: [id])
  item                 Item           @relation(fields: [itemId], references: [id])
  resourceOutput       ResourceOutput @relation(fields: [resourceOutputId], references: [id], onDelete: Cascade)
}

model Building {
  id            String        @id @default(uuid())
  name          String
  type          String
  quantity      Int           @default(1)
  clockSpeed    Float         @default(100.0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  factoryId     String
  recipeId      String?
  gameClassName String?
  factory       Factory       @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  gameBuilding  GameBuilding? @relation(fields: [gameClassName], references: [className])
  recipe        Recipe?       @relation(fields: [recipeId], references: [id])
  outputs       ItemFlow[]    @relation("BuildingOutputs")
  inputs        ItemFlow[]    @relation("BuildingInputs")
}

model Recipe {
  id            String       @id @default(uuid())
  name          String       @unique
  description   String?
  craftTime     Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  gameClassName String?
  buildings     Building[]
  gameRecipe    GameRecipe?  @relation(fields: [gameClassName], references: [className])
  recipeItems   RecipeItem[]
}

model RecipeItem {
  id       String  @id @default(uuid())
  quantity Float
  itemId   String
  recipeId String
  isInput  Boolean
  item     Item    @relation(fields: [itemId], references: [id])
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId, isInput])
}

model Item {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  category        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  gameClassName   String?
  inputResources  InputResource[]
  gameItem        GameItem?        @relation(fields: [gameClassName], references: [className])
  itemFlows       ItemFlow[]
  outputResources OutputResource[]
  recipeItems     RecipeItem[]
}

model Resource {
  id        String          @id @default(uuid())
  type      String
  purity    String
  location  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  worldId   String
  asOrigin  InputResource[] @relation("ResourceNodeOrigin")
  world     World           @relation(fields: [worldId], references: [id], onDelete: Cascade)
}

model ItemFlow {
  id               String    @id @default(uuid())
  rate             Float
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  itemId           String
  sourceBuildingId String?
  targetBuildingId String?
  sourceFactoryId  String?
  targetFactoryId  String?
  item             Item      @relation(fields: [itemId], references: [id])
  sourceBuilding   Building? @relation("BuildingOutputs", fields: [sourceBuildingId], references: [id])
  sourceFactory    Factory?  @relation("FactoryOutputs", fields: [sourceFactoryId], references: [id])
  targetBuilding   Building? @relation("BuildingInputs", fields: [targetBuildingId], references: [id])
  targetFactory    Factory?  @relation("FactoryInputs", fields: [targetFactoryId], references: [id])
}

model GameItem {
  className      String           @id
  name           String
  description    String?
  stackSize      Int?
  energy         Float?
  radioactive    Float?
  canBeDiscarded Boolean?
  sinkPoints     Int?
  abbreviation   String?
  form           String?
  fluidColor     String?
  alienItem      Boolean?
  stable         Boolean?
  experimental   Boolean?
  asInput        GameRecipeItem[] @relation("GameItemInput")
  items          Item[]
}

model GameRecipe {
  className                String               @id
  name                     String
  unlockedBy               String?
  duration                 Float
  alternate                Boolean?
  inCraftBench             Boolean?
  inWorkshop               Boolean?
  inBuildGun               Boolean?
  inCustomizer             Boolean?
  manualCraftingMultiplier Float?
  minPower                 Float?
  maxPower                 Float?
  stable                   Boolean?
  experimental             Boolean?
  producedIn               GameRecipeBuilding[]
  recipeItems              GameRecipeItem[]
  recipes                  Recipe[]
}

model GameRecipeItem {
  id        String     @id @default(uuid())
  amount    Float
  isInput   Boolean
  recipeId  String
  itemId    String
  inputItem GameItem   @relation("GameItemInput", fields: [itemId], references: [className], map: "GameRecipeItem_inputItem_fkey")
  recipe    GameRecipe @relation(fields: [recipeId], references: [className], onDelete: Cascade)

  @@index([recipeId, isInput])
}

model GameBuilding {
  className           String               @id
  name                String
  description         String?
  unlockedBy          String?
  powerUsage          Float?
  powerGenerated      Float?
  supplementPerMinute Float?
  overclockable       Boolean?
  somersloopSlots     Int?
  isVehicle           Boolean?
  stable              Boolean?
  experimental        Boolean?
  buildings           Building[]
  recipes             GameRecipeBuilding[]
}

model GameRecipeBuilding {
  id         String       @id @default(uuid())
  recipeId   String
  buildingId String
  building   GameBuilding @relation(fields: [buildingId], references: [className], onDelete: Cascade)
  recipe     GameRecipe   @relation(fields: [recipeId], references: [className], onDelete: Cascade)

  @@unique([recipeId, buildingId])
}
